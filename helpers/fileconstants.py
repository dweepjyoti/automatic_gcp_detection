"""
.. versionadded:: 0.1
.. codeauthor:: Nekhelesh Ramananthan <krnekhelesh@skylarkdrones.com>
"""

# Copyright (C) 2017 Skylark Drones

import os


class FileConstants:
    """
    Class to hold file and folder names of commonly used resources. For
    instance the geotagged images of a flight are **always** stored by DMC
    in a folder by the name *Geotagged-Images*. If this is ever changed in the
    future, it just need to be changed in this one class and all public uses
    of it will automatically adapt to the new name change.

    Example usage ::

        from quark.helpers.fileconstants import FileConstants

        print('Geotagged folder name is {}'.format(
            FileConstants().GEOTAG_IMG_FOLDER_NAME)
    """

    #: Downstream app root directory path (useful for specifying relative file
    #: pathing to resource files). *Warning: This expects a directory structure
    #: as specified in* :doc:`../using-quark` *for it to work as expected.*
    APP_ROOT_DIR = os.path.abspath(os.path.join(__file__, '..', '..', '..'))

    #: Quark root directory path (useful for specifying relative file paths
    #: to resource files)
    QUARK_LIB_DIR = os.path.abspath(os.path.join(__file__, '..', '..'))

    #: *Deprecated since version Quark-0.1.1:* Use
    #: :py:data:`~quark.helpers.fileconstants.FileConstants.APP_ROOT_DIR`
    #: instead. :py:data:`~quark.helpers.fileconstants.FileConstants.PROJECT_ROOT_DIR`
    #: will be removed in Quark-0.2.
    PROJECT_ROOT_DIR = os.path.abspath(os.path.join(__file__, '..', '..'))

    #: Directory which holds the raw images of a flight
    RAW_IMG_FOLDER_NAME = "Raw-Images"

    #: Directory which holds the georeferenced images of a flight
    GEOTAG_IMG_FOLDER_NAME = "Geotagged-Images"

    #: File containing the filtered CAM messages between flight launch and
    #: land time
    CAM_FILE_NAME = "Cam-Msg.csv"

    #: KMZ file to visually represent all the positions where an image was
    #: captured
    PHOTO_LOCATION_FILE_NAME = "Photo-Location.kmz"

    #: KMZ file to visually represent the GCP points along with images that
    #: are positive/negative for GCP visibility
    GCP_VERIFICATION_FILE_NAME = 'Gcp-Verification.kmz'

    #: CSV file containing image name along with their matched 3D position
    #: (lat, lng, alt) and other parameters created by
    #: :py:class:`~quark.modules.flightanalyser.FlightAnalyser`
    PHOTO_DETAIL_FILE_NAME = "Photo-Detail.csv"

    #: Log created by DMC which is a truncated version of the original
    #: flight log
    FORMATTED_LOG_FILE_NAME = "Formatted-Log.log"

    #: Cache JSON file created by
    #: :py:class:`~quark.modules.flightanalyser.FlightAnalyser` to store flight
    #: launch and land info
    FLIGHT_DATA_FILE_NAME = "Flight-Data.json"

    #: Folder containing the SRTs created by DJI. Each file contains the
    #: position of a drone at a 1 second interval
    ORG_SRT_FOLDER_NAME = "Original-SRTs"

    #: Folder containing the SRTs created by
    #: :py:class:`~quark.modules.chainagesrt.ChainageSrt` class
    CHAINAGE_SRT_FOLDER_NAME = "Chainage-SRTs"

    #: KMZ file to visually represent the drone path to verify if the drone
    #: has covered the entire area of interest. This file is generated by
    #: :py:class:`~quark.modules.dronepathkml.DronePathKml` class.
    PATH_VERIFICATION_FILE_NAME = 'Drone-Path-Verification.kmz'

    #: Image overlap heat map to visually represent the overlap of a given
    #: image dataset
    OVERLAP_HEAT_MAP_FILE_NAME = 'Overlap-Heat-Map.png'